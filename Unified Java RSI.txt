//@version=6
indicator(title="Enhanced RSI with Regression Lines and Signals", shorttitle="RSI+Regression", format=format.price, precision=2)

// Input Parameters for RSI
rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
calculateDivergence = input.bool(false, title="Calculate Divergence", group="RSI Settings", display = display.data_window, tooltip = "Calculating divergences is needed in order for divergence alerts to fire.")

// Input Parameters for Regression Lines
regressionLengthInput = input.int(100, title="Regression Length", minval=1, maxval=5000, group="Regression Settings")
upperMultInput = input.float(2.0, title="Upper Deviation Multiplier", group="Regression Settings")
lowerMultInput = input.float(2.0, title="Lower Deviation Multiplier", group="Regression Settings")

// RSI Calculation
change = ta.change(rsiSourceInput)
up = ta.rma(math.max(change, 0), rsiLengthInput)
down = ta.rma(-math.min(change, 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

// Regression Calculation
calcSlope(source, length) =>
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

[s, a, i] = calcSlope(rsi, regressionLengthInput)
startPrice = i + s * (regressionLengthInput - 1)
endPrice = i

// Standard Deviation Calculation
calcDev(source, length, slope, average, intercept) =>
    stdDevAcc = 0.0
    for j = 0 to length - 1
        price = source[j] - (intercept + slope * j)
        stdDevAcc += price * price
    stdDev = math.sqrt(stdDevAcc / (length - 1))
    [stdDev]

[stdDev] = calcDev(rsi, regressionLengthInput, s, a, i)
upperStart = startPrice + upperMultInput * stdDev
upperEnd = endPrice + upperMultInput * stdDev
lowerStart = startPrice - lowerMultInput * stdDev
lowerEnd = endPrice - lowerMultInput * stdDev

// Draw Regression Lines
var line baseLine = na
var line upper = na
var line lower = na

if na(baseLine)
    baseLine := line.new(bar_index - regressionLengthInput + 1, startPrice, bar_index, endPrice, width=1, color=color.blue)
    upper := line.new(bar_index - regressionLengthInput + 1, upperStart, bar_index, upperEnd, width=1, color=color.red)
    lower := line.new(bar_index - regressionLengthInput + 1, lowerStart, bar_index, lowerEnd, width=1, color=color.green)
else
    line.set_xy1(baseLine, bar_index - regressionLengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    line.set_xy1(upper, bar_index - regressionLengthInput + 1, upperStart)
    line.set_xy2(upper, bar_index, upperEnd)
    line.set_xy1(lower, bar_index - regressionLengthInput + 1, lowerStart)
    line.set_xy2(lower, bar_index, lowerEnd)

// RSI Plot
rsiPlot = plot(rsi, "RSI", color=#7E57C2)
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
midline = hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
midLinePlot = plot(50, color = na, editable = false, display = display.none)
fill(rsiPlot, midLinePlot, 100, 70, top_color = color.new(color.green, 0), bottom_color = color.new(color.green, 100),  title = "Overbought Gradient Fill")
fill(rsiPlot, midLinePlot, 30,  0,  top_color = color.new(color.red, 100), bottom_color = color.new(color.red, 0),      title = "Oversold Gradient Fill")

// Signal Generation
var float buyPrice = na
var float sellPrice = na

// Check for BUY signal (RSI crosses above the lower regression line)
if (ta.crossover(rsi, lowerEnd))
    buyPrice := close
    sellPrice := na

// Check for SELL signal (RSI crosses below the upper regression line)
if (ta.crossunder(rsi, upperEnd))
    sellPrice := close
    buyPrice := na

// Plot BUY and SELL signals with price labels
if (not na(buyPrice))
    label.new(bar_index, low, text="BUY\n" + str.tostring(buyPrice, "#.##"), style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal, yloc=yloc.belowbar)

if (not na(sellPrice))
    label.new(bar_index, high, text="SELL\n" + str.tostring(sellPrice, "#.##"), style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal, yloc=yloc.abovebar)

// Alerts
alertcondition(not na(buyPrice), title='BUY Signal', message='RSI crossed above the lower regression line. Consider buying.')
alertcondition(not na(sellPrice), title='SELL Signal', message='RSI crossed below the upper regression line. Consider selling.')
