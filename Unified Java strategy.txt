//@version=6
indicator("Unified Trading System with Regression Trend and Pivot Signals", overlay=true)

// Input Parameters
lengthInput = input.int(100, title="Regression Length", minval=1, maxval=5000)
pivot_len = input.int(10, title="Pivot Period")
sourceInput = input.source(close, title="Source")
upperMultInput = input.float(2.0, title="Upper Deviation Multiplier")
lowerMultInput = input.float(2.0, title="Lower Deviation Multiplier")

// Regression Calculation on D1 Timeframe
regression_tf = "D"

// Fetch source data for the regression length on the daily timeframe
sourceData = request.security(syminfo.tickerid, regression_tf, sourceInput)

// Calculate slope, average, and intercept
calcSlope(source, length) =>
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

[s, a, i] = calcSlope(sourceData, lengthInput)
startPrice = i + s * (lengthInput - 1)
endPrice = i

// Standard Deviation Calculation
calcDev(source, length, slope, average, intercept) =>
    stdDevAcc = 0.0
    for j = 0 to length - 1
        price = source[j] - (intercept + slope * j)
        stdDevAcc += price * price
    stdDev = math.sqrt(stdDevAcc / (length - 1))
    [stdDev]

[stdDev] = calcDev(sourceData, lengthInput, s, a, i)
upperStart = startPrice + upperMultInput * stdDev
upperEnd = endPrice + upperMultInput * stdDev
lowerStart = startPrice - lowerMultInput * stdDev
lowerEnd = endPrice - lowerMultInput * stdDev

// Draw Regression Lines
var line baseLine = na
var line upper = na
var line lower = na

if na(baseLine)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, color=color.blue)
    upper := line.new(bar_index - lengthInput + 1, upperStart, bar_index, upperEnd, width=1, color=color.red)
    lower := line.new(bar_index - lengthInput + 1, lowerStart, bar_index, lowerEnd, width=1, color=color.green)
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStart)
    line.set_xy2(upper, bar_index, upperEnd)
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStart)
    line.set_xy2(lower, bar_index, lowerEnd)

// Pivot Detection
pivot_high = ta.pivothigh(high, pivot_len, pivot_len)
pivot_low = ta.pivotlow(low, pivot_len, pivot_len)

// Plot Pivot Levels
plotshape(not na(pivot_high), style=shape.triangleup, location=location.abovebar, color=color.red, size=size.small, title="Pivot High")
plotshape(not na(pivot_low), style=shape.triangledown, location=location.belowbar, color=color.green, size=size.small, title="Pivot Low")

// Generate BUY and SELL signals when Pivot Low and Pivot High are detected
if (not na(pivot_low))
    label.new(bar_index, low, text="BUY\n" + str.tostring(low, "#.##"), style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal, yloc=yloc.belowbar)

if (not na(pivot_high))
    label.new(bar_index, high, text="SELL\n" + str.tostring(high, "#.##"), style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal, yloc=yloc.abovebar)