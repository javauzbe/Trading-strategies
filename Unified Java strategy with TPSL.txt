//@version=6
indicator("Java Risk Calculation", overlay=true)

// Input Parameters
lengthInput = input.int(100, title="Regression Length", minval=1, maxval=5000)
pivot_len = input.int(10, title="Pivot Period")
sourceInput = input.source(close, title="Source")
upperMultInput = input.float(2.0, title="Upper Deviation Multiplier")
lowerMultInput = input.float(2.0, title="Lower Deviation Multiplier")

// Risk Calculator Inputs
risk_percent = input.float(1.0, title="Risk Percentage (%)", tooltip="Risk percentage for Stop Loss") / 100
reward_mult = input.float(2.0, title="Reward Multiplier", tooltip="Multiplier for Take Profit relative to Risk")
buffer_percent = input.float(1.5, title="SL Buffer Percentage", tooltip="Buffer below lowest wick for SL") / 100
atr_mult = input.float(1.5, title="ATR Multiplier for SL", tooltip="Multiplier for ATR-based Stop Loss")

// Regression Calculation on D1 Timeframe
regression_tf = "D"
sourceData = request.security(syminfo.tickerid, regression_tf, sourceInput)

// Calculate slope, average, and intercept
calcSlope(source, length) =>
    sumX = 0.0
    sumY = 0.0
    sumXSqr = 0.0
    sumXY = 0.0
    for i = 0 to length - 1
        val = source[i]
        per = i + 1.0
        sumX += per
        sumY += val
        sumXSqr += per * per
        sumXY += val * per
    slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
    average = sumY / length
    intercept = average - slope * sumX / length + slope
    [slope, average, intercept]

[s, a, i] = calcSlope(sourceData, lengthInput)
startPrice = i + s * (lengthInput - 1)
endPrice = i

// Standard Deviation Calculation
calcDev(source, length, slope, average, intercept) =>
    stdDevAcc = 0.0
    for j = 0 to length - 1
        price = source[j] - (intercept + slope * j)
        stdDevAcc += price * price
    stdDev = math.sqrt(stdDevAcc / (length - 1))
    [stdDev]

[stdDev] = calcDev(sourceData, lengthInput, s, a, i)
upperStart = startPrice + upperMultInput * stdDev
upperEnd = endPrice + upperMultInput * stdDev
lowerStart = startPrice - lowerMultInput * stdDev
lowerEnd = endPrice - lowerMultInput * stdDev

// ATR Calculation
atr_value = ta.atr(pivot_len) * atr_mult

// Draw Regression Lines
var line baseLine = na
var line upper = na
var line lower = na

if na(baseLine)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, color=color.blue)
    upper := line.new(bar_index - lengthInput + 1, upperStart, bar_index, upperEnd, width=1, color=color.red)
    lower := line.new(bar_index - lengthInput + 1, lowerStart, bar_index, lowerEnd, width=1, color=color.green)
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStart)
    line.set_xy2(upper, bar_index, upperEnd)
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStart)
    line.set_xy2(lower, bar_index, lowerEnd)

// Pivot Detection
pivot_high = ta.pivothigh(high, pivot_len, pivot_len)
pivot_low = ta.pivotlow(low, pivot_len, pivot_len)

// Plot Pivot Levels
plotshape(not na(pivot_high), style=shape.triangleup, location=location.abovebar, color=color.red, size=size.small, title="Pivot High")
plotshape(not na(pivot_low), style=shape.triangledown, location=location.belowbar, color=color.green, size=size.small, title="Pivot Low")

// Generate BUY and SELL signals when Pivot Low and Pivot High are detected
var float latest_entry = na
var bool is_long = false
var float latest_support = na
var float latest_resistance = na
var float lowest_wick = na

if (not na(pivot_low))
    latest_entry := low
    is_long := true
    latest_support := lowerEnd
    lowest_wick := ta.lowest(low, pivot_len)
    label.new(bar_index, low, text="BUY\n" + str.tostring(low, "#.##"), style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal, yloc=yloc.belowbar)

if (not na(pivot_high))
    latest_entry := high
    is_long := false
    latest_resistance := upperEnd
    label.new(bar_index, high, text="SELL\n" + str.tostring(high, "#.##"), style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal, yloc=yloc.abovebar)

// Risk Calculator
stop = is_long ? math.min(latest_support, lowest_wick) * (1 - buffer_percent) - atr_value : latest_resistance + atr_value
exit = is_long ? latest_resistance : latest_support
sl_percent = math.abs((stop - latest_entry) / latest_entry) * 100
tp_percent = math.abs((exit - latest_entry) / latest_entry) * 100
rrmult = sl_percent > 0 ? tp_percent / sl_percent : na
pos = is_long ? "LONG" : "SHORT"
mcol = is_long ? color.green : color.red

// Initialize Risk Table
var table mTable = table.new(position.top_right, columns=2, rows=6, border_width=1, frame_width=2, frame_color=color.new(#000000, 50), border_color=color.new(#000000, 0))
table.clear(mTable, start_column=0, start_row=0)

// Add Labels to Risk Table
table.cell(mTable, column=0, row=0, text="Position", text_color=color.black)
table.cell(mTable, column=0, row=1, text="SL ($)", text_color=color.black)
table.cell(mTable, column=0, row=2, text="SL (%)", text_color=color.black)
table.cell(mTable, column=0, row=3, text="TP ($)", text_color=color.black)
table.cell(mTable, column=0, row=4, text="TP (%)", text_color=color.black)
table.cell(mTable, column=0, row=5, text="RR Ratio", text_color=color.black)

// Update Risk Table
table.cell(mTable, column=1, row=0, text=str.tostring(pos), text_color=color.white, bgcolor=mcol)
table.cell(mTable, column=1, row=1, text=str.tostring(stop, "0.00"), text_color=color.black)
table.cell(mTable, column=1, row=2, text=str.tostring(sl_percent, "0.00") + "%", text_color=color.black)
table.cell(mTable, column=1, row=3, text=str.tostring(exit, "0.00"), text_color=color.black)
table.cell(mTable, column=1, row=4, text=str.tostring(tp_percent, "0.00") + "%", text_color=color.black)
table.cell(mTable, column=1, row=5, text=str.tostring(rrmult, "0.0") + " : 1", text_color=color.black)
